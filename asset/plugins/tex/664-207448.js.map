{"version":3,"file":"664-207448.js","mappings":"8LACA,QAA4B,sBAA5B,EAA0D,kBAA1D,EAAqF,mBCGvE,SAAUA,EAAV,GAAyD,IAA3C,SAAEC,EAAF,MAAYC,GAA+B,EACnE,MAAM,MAAEC,EAAF,KAASC,GAASF,EAExB,OAAO,IAAAG,UAAQ,KAEX,IACI,IAAIC,EAAO,mBAAqBH,EAAO,CAAEI,YAAsB,WAATH,EAAmBI,OAAQ,SAWjF,OARIP,EADS,WAATG,GAEI,iBAAMK,UAAS,UAAK,EAAL,YAAyB,GAClCC,wBAAyB,CAAEC,OAAQL,MAGzC,cAAGG,UAAS,UAAK,EAAL,YAAyB,GAAgBC,wBAAyB,CAAEC,OAAQL,KAGzFL,EACT,MACE,OAAOA,KAGZ,CAACE","sources":["webpack://TopWritePlugins.tex/./src/scss/tex.module.scss","webpack://TopWritePlugins.tex/./src/components/tex.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container--45057d41\",\"block\":\"block--a89b8790\",\"inline\":\"inline--03ed15db\"};","import { PropsWithChildren, useMemo } from 'react';\r\nimport katex from 'katex';\r\nimport styles from '../scss/tex.module.scss';\r\n\r\nexport default function Tex({ children, props }: PropsWithChildren<any>) {\r\n    const { value, type } = props;\r\n\r\n    return useMemo(() => {\r\n\r\n        try {\r\n            let html = katex.renderToString(value, { displayMode: type !== 'inline', output: 'html' });\r\n\r\n            if (type === 'inline') {\r\n                children =\r\n                    <span className={`${styles.container} ${styles.inline}`}\r\n                          dangerouslySetInnerHTML={{ __html: html }} />;\r\n            } else {\r\n                children =\r\n                    <p className={`${styles.container} ${styles.block}`} dangerouslySetInnerHTML={{ __html: html }} />;\r\n            }\r\n\r\n            return children;\r\n        } catch {\r\n            return children;\r\n        }\r\n\r\n    }, [value]);\r\n}\r\n"],"names":["Tex","children","props","value","type","useMemo","html","displayMode","output","className","dangerouslySetInnerHTML","__html"],"sourceRoot":""}